/* Mantaro's build.gradle */

//Imports
import org.apache.tools.ant.filters.ReplaceTokens


//Plugins
plugins {
	//Compiles Java
	id 'java'
	//Adds an Executable Manifest
	id 'application'
	//Creates FatJars
	id 'com.github.johnrengelman.shadow' version '1.2.4'
	//Checks for RestActions
	id 'com.sedmelluq.jdaction' version '1.0.1'
}

//Define the Main Class
mainClassName = "net.kodehawa.mantarobot.MantaroBot"

//Use an unified versioning system
def ver = new Version(major: 2, minor: 0, revision: 4)
version ver.toString()

//We are going to use Java 8
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	jcenter()
}

dependencies {
	compile 'net.dv8tion:JDA:3.0.BETA2_135'
	compile 'com.sedmelluq:jda-nas:1.0.3'
	compile 'com.sedmelluq:lavaplayer:1.2.12'
	compile 'ch.qos.logback:logback-classic:0.9.26'
	compile 'org.reflections:reflections:0.9.10'
	compile 'us.monoid.web:resty:0.3.2'
	compile fileTree(dir: 'lib', include: '*.jar')
	compile 'com.google.code.gson:gson:2.8.0'
	compile 'bsh:bsh:2.0b4'
	compile 'com.google.guava:guava:19.0'
	compile 'commons-codec:commons-codec:1.5'
	compile 'net.java.dev.jna:jna-platform:4.2.2'
	compile 'org.apache.httpcomponents:fluent-hc:4.5.2'
}

task wrapper(type: Wrapper) {
	gradleVersion = '3.2'
}

//Task for the versioning system
task prepareSource(type: Copy) {
	from 'src/main/java'
	into 'build/prepared-src'
	filter(ReplaceTokens, tokens: [
			version: ver.toString()
	])
	dependsOn clean
}
prepareSource.dependsOn clean

compileJava {
	source = prepareSource.destinationDir
	classpath = sourceSets.main.compileClasspath
	options.encoding = 'UTF-8'
	dependsOn prepareSource
}

build.dependsOn shadowJar

artifacts {
	archives shadowJar
}

jar {
	classifier = "nodeps"
}

shadowJar {
	classifier = ""
}

class Version {
	String major, minor, revision

	static String getBuild() {
		return new Date().format('ddMMyyyy')
	}

	String toString() {
		"${major}.${minor}.${revision}_$build"
	}
}