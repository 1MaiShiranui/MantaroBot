//Imports
import org.apache.tools.ant.filters.ReplaceTokens


//Plugins
plugins {
    //Compiles Java
    id 'java'
    //Adds an Executable Manifest
    id 'application'
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.sedmelluq.jdaction'

//Define the Main Class
mainClassName = "net.kodehawa.mantarobot.connectionwatcher.ConnectionWatcher"

//Use an unified versioning system
def ver = new Version(major: 3, minor: 0, revision: 0)
version ver.toString()

//We are going to use Java 8
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
    maven {
        url  "http://dl.bintray.com/frederikam/JCA"
    }
    maven {
        url  "http://dl.bintray.com/brjdevs/maven"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    compile 'net.dv8tion:JDA:3.0.0_165'
    compile 'br.com.brjdevs:network:1.0.0_2'
    compile 'ch.qos.logback:logback-classic:0.9.26'
    compile 'net.sandius.rembulan:rembulan-compiler:0.1-SNAPSHOT'
    compile 'net.sandius.rembulan:rembulan-stdlib:0.1-SNAPSHOT'
    compile 'com.esotericsoftware:kryo:4.0.0'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2'
}

//Task for the versioning system
task prepareSource(type: Copy) {
    from 'src/main/java'
    into 'build/prepared-src'
    filter(ReplaceTokens, tokens: [
            version: ver.toString()
    ])
    dependsOn clean
}
prepareSource.dependsOn clean

compileJava {
    source = prepareSource.destinationDir
    classpath = sourceSets.main.compileClasspath
    options.encoding = 'UTF-8'
    dependsOn prepareSource
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-parameters'
    options.encoding = 'UTF-8'
}

build.dependsOn shadowJar

artifacts {
    archives shadowJar
}

jar {
    classifier = "nodeps"
}

shadowJar {
    classifier = ""
}

class Version {
    String major, minor, revision

    static String getBuild() {
        return new Date().format('ddMMyyyy')
    }

    String toString() {
        "${major}.${minor}.${revision}_$build"
    }
}